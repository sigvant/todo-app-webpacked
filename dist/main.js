(()=>{function t(t){this.name=t,this.todos=[]}function e(t,e,n,a){this.name=t,this.date=e,this.priority=n,this.status=a}const n=document.querySelector(".todo-input"),a=document.querySelector(".todo-date-input"),d=document.querySelector(".priority-select"),s=document.querySelector(".todo-button"),o=document.querySelector(".todo-list"),c=document.querySelector(".filter-todo"),l=document.querySelector(".tab-button"),i=document.querySelector(".tab-list");function r(){u();let t=document.querySelector(".tab-active").children[0].children[0].innerText;tabs.forEach((e=>{e.name==t&&e.todos.forEach((t=>{const e=document.createElement("div");e.classList.add("todo");let n=t.name,a=t.date,d=t.priority;const s=document.createElement("li");s.classList.add("todo-item");const c=document.createElement("div");c.textContent=n,c.classList.add("todo-info-boxes-name");const l=document.createElement("div");l.textContent=a,l.classList.add("todo-info-boxes-date");const i=document.createElement("div");i.textContent=d,i.classList.add("todo-info-boxes-priority"),s.appendChild(c),s.appendChild(l),s.appendChild(i),e.appendChild(s);const r=document.createElement("button");r.textContent="‚úîÔ∏è",r.classList.add("complete-btn"),e.appendChild(r);const m=document.createElement("button");m.textContent="üóëÔ∏è",m.classList.add("trash-btn"),e.appendChild(m),o.appendChild(e)}))}))}function m(){void 0!==i.childNodes[0]&&(i.childNodes[0].classList.add("tab-active"),r())}function u(){return null===localStorage.getItem("tabs")?tabs=[]:tabs=JSON.parse(localStorage.getItem("tabs")),tabs}document.querySelectorAll(".tab"),document.addEventListener("DOMContentLoaded",(function(){u(),tabs.forEach((function(t){let e=t.name,n=document.createElement("li");n.classList.add("tab");let a=document.createElement("div");a.classList.add("tab-div");let d=document.createElement("div");d.classList.add("span-div");let s=document.createElement("span");s.textContent=e;let o=document.createElement("div");o.classList.add("trashcan-div");let c=document.createElement("button");c.classList.add("trash-btn"),c.textContent="üóëÔ∏è",d.appendChild(s),a.appendChild(d),o.appendChild(c),n.appendChild(a),n.appendChild(o),i.appendChild(n)}))})),document.addEventListener("DOMContentLoaded",m),document.addEventListener("DOMContentLoaded",(function(){let t=new Date,e=t.getDate(),n=t.getMonth()+1;n<10&&(n=`0${n}`);let a=`${t.getFullYear()}-${n}-${e}`;document.querySelector(".todo-date-input").setAttribute("min",a)})),s.addEventListener("click",(function(t){t.preventDefault();const s=document.createElement("div");s.classList.add("todo");let c=n.value,l=a.value,i=d.value,r=new e(c,l,i);const m=document.createElement("li");m.classList.add("todo-item");const p=document.createElement("div");p.textContent=c,p.classList.add("todo-info-boxes-name");const b=document.createElement("div");b.textContent=l,b.classList.add("todo-info-boxes-date");const h=document.createElement("div");h.textContent=i,h.classList.add("todo-info-boxes-priority"),m.appendChild(p),m.appendChild(b),m.appendChild(h),s.appendChild(m),function(t){u();const e=document.querySelector(".tab-active").childNodes[0].innerText;tabs.forEach((n=>{n.name==e&&(n.todos.push(t),localStorage.setItem("tabs",JSON.stringify(tabs)))}))}(r);const L=document.createElement("button");L.textContent="‚úîÔ∏è",L.classList.add("complete-btn"),s.appendChild(L);const f=document.createElement("button");f.textContent="üóëÔ∏è",f.classList.add("trash-btn"),s.appendChild(f),o.appendChild(s),n.value="",a.value=""})),o.addEventListener("click",(function(t){const e=t.target;if("trash-btn"===e.classList[0]){const t=e.parentElement;t.classList.add("fall"),function(t){const e=t.childNodes[0].childNodes[0].innerText;u(),tabs.forEach((t=>{t.todos=t.todos.filter((t=>t.name!=e))})),localStorage.setItem("tabs",JSON.stringify(tabs))}(t),t.addEventListener("transitionend",(()=>{t.remove()}))}"complete-btn"===e.classList[0]&&e.parentElement.classList.toggle("completed")})),c.addEventListener("click",(function(t){o.childNodes.forEach((function(e){switch(t.target.value){case"all":e.style.display="flex";break;case"completed":e.classList.contains("completed")?e.style.display="flex":e.style.display="none";break;case"uncompleted":e.classList.contains("completed")?e.style.display="none":e.style.display="flex"}}))})),l.addEventListener("click",(function(e){e.preventDefault();let n=new t(prompt("Name your tab!","Popsicle")),a=document.createElement("li");a.classList.add("tab");let d=document.createElement("div");d.classList.add("tab-div");let s=document.createElement("div");s.classList.add("span-div");let o=document.createElement("span");o.textContent=n.name;let c=document.createElement("div");c.classList.add("trashcan-div");let l=document.createElement("button");l.classList.add("trash-btn-tab"),l.textContent="üóëÔ∏è",function(t){u(),tabs.push(t),localStorage.setItem("tabs",JSON.stringify(tabs))}(n),s.appendChild(o),d.appendChild(s),c.appendChild(l),a.appendChild(d),a.appendChild(c),i.appendChild(a),m()})),i.addEventListener("click",(function(t){const e=t.target;if("trash-btn-tab"===e.classList[0]||"trash-btn"===e.classList[0]){const t=e.parentElement.parentElement;if(1===t.parentElement.childNodes.length)return;t.classList.add("fall"),function(t){u();const e=t.children[0].innerText;tabs.splice(tabs.indexOf(e),1),localStorage.setItem("tabs",JSON.stringify(tabs))}(t),t.addEventListener("transitionend",(()=>{t.remove()}))}if("tab-div"===e.classList[0]||"tab"===e.classList[0]||"span-div"===e.classList[0]){let n=document.querySelectorAll(".tab");t.target.classList.contains("tab")&&(n.forEach((t=>t.classList.remove("tab-active"))),e.classList.add("tab-active"),document.querySelector(".todo-list").innerText="",r())}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,